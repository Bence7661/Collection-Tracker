local utils = serious_collection_tracker_utils
local collectionTracker = serious_collection_tracker

local function IsLootingStalker(obj, bag, mode)
    if bag == "npc_bag" and mode == "loot" then
        local parent = obj and obj:parent()
        
        if parent then
            return IsStalker(parent)
        end
    end

    return false
end

-- TakeIntoInventory
function take_into_inv_appear_cond(obj, bag, mode)
    if IsLootingStalker(obj, bag, mode) or collectionTracker.IsInInventory(obj:section()) then
        return false
    end

    if utils.IsRelevantItem(obj) then
		return true
	end

    return false
end

function take_into_inv_opt(_, _, _)
	return "take into inventory"
end

function take_into_inventory(obj, _, _)
    if not obj then
        return
    end

    collectionTracker.UpsertInventoryEntry(obj)
end
-- TakeIntoInventory

-- TakeFromInventory
function take_from_inv_appear_cond(obj, bag, mode)
    if IsLootingStalker(obj, bag, mode) then
        return false
    end

    return collectionTracker.IsInInventory(obj:section()) and collectionTracker.IsExactItemInInventory(obj)
end

function take_from_inv_opt(_, _, _)
	return "take from inventory"
end

function take_from_inventory(obj, _, _)
    if not obj then
        return
    end
    
    collectionTracker.TakeFromInventory(obj:section())
end
-- TakeFromInventory

-- OverwriteInventoryItem
function overwrite_inv_item_appear_cond(obj, bag, mode)
    if IsLootingStalker(obj, bag, mode) then
        return false
    end

    return collectionTracker.IsInInventory(obj:section()) and not collectionTracker.IsExactItemInInventory(obj)
end

function overwrite_inv_item_opt(_, _, _)
	return "overwrite inventory item"
end

function overwrite_inventory_item(obj, _, _)
    if not obj then
        return
    end
    
    collectionTracker.UpsertInventoryEntry(obj)
end
-- OverwriteInventoryItem

-- Batch register
function batch_inv_appear_cond(obj, bag, mode)
    if bag == "npc_bag" and mode == "loot" then
        local parent = obj and obj:parent()
        
        if parent and IsInvbox(parent) then
            if utils.IsRelevantItem(obj) then
                return true
            end
        end
    end

    return false
end

function batch_inv_opt(_, _, _)
	return "batch inventory"
end

function take_batch_inventory(obj, _, _)
    if not obj then
        return
    end

    local stash = obj:parent()
    collectionTracker.BatchTakeIntoInventory(stash)
end
-- Batch register

function on_game_start()
	custom_functor_autoinject.add_functor("serious_take_to_inventory", take_into_inv_appear_cond, take_into_inv_opt, nil, take_into_inventory, true)
	custom_functor_autoinject.add_functor("serious_take_from_inventory", take_from_inv_appear_cond, take_from_inv_opt, nil, take_from_inventory, true)
	custom_functor_autoinject.add_functor("serious_overwrite_inventory_item", overwrite_inv_item_appear_cond, overwrite_inv_item_opt, nil, overwrite_inventory_item, true)
	custom_functor_autoinject.add_functor("serious_batch_inventory", batch_inv_appear_cond, batch_inv_opt, nil, take_batch_inventory, true)
end