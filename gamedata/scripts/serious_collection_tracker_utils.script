local config = CollectionTrackerConfig

function HasCondition(entry) return entry and entry.general_cond end
function ShouldDisplayCond(entry) return entry and config.Get("disp_general_cond") and HasCondition(entry) end
function StringIsNullOrEmpty(str) return str == nil or str:match("^%s*$") ~= nil end
function IsFirearm(obj) return obj and IsWeapon(obj) and not IsMelee(obj) end

function HasParts(obj)
    if not obj then return false end

    if IsMelee(obj) then return false end
    if IsWeapon(obj) or IsOutfit(obj) or IsHeadgear(obj) then return true end
end

function IsRelevantItem(obj)
    if not obj then return false end
    if not IsWeapon(obj) and not IsMelee(obj) and not IsOutfit(obj) and not IsHeadgear(obj) then
       return false
    end

    return true
end

function IsInsideBox(obj)
    if not obj then return false end

    local parent = obj:parent()
    return parent and IsInvbox(parent) or false
end

function IsInPlayerBag(obj)
    if not obj then return false end

    local parent = obj:parent()
    return parent and parent:id() == db.actor:id() or false
end

function SendPdaNews(msg, dispDuration, delay)
    if StringIsNullOrEmpty(msg) then return false end

    if delay and delay >= 0 then
        CreateTimeEvent("collection_tracker_utils", "delayed_pda_news", 0, SendPdaNews, msg, dispDuration, nil)
        return
    end

    news_manager.send_tip(db.actor, msg, nil, "ui_icon_news_trx_communication", dispDuration)
    return true
end

function IsEntryObjFirearm(entry)
    if not entry then return false end
    local id = entry.obj_id
    local objRef = id and get_object_by_id(id) or nil

    return IsFirearm(objRef)
end

--Each version will add stuff to this if the data structure changes.
function UpdateDataStructure()
    local inventory = serious_collection_tracker.GetInventory()
    if not inventory then return end

    for _, entry in pairs(inventory) do
        entry.obj_ref = nil

        if IsEntryObjFirearm(entry) then
            entry.general_cond = false
        end
    end
end